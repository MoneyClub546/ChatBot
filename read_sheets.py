import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread_dataframe import set_with_dataframe
import pandas as pd
import json
import base64

SHEET_NAME = "Revival Inactive leads"
CREDENTIALS_FILE = "healthy-gasket-467014-v4-21853776be9b.json"
decoded_creds = base64.b64decode("ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAiaGVhbHRoeS1nYXNrZXQtNDY3MDE0LXY0IiwKICAicHJpdmF0ZV9rZXlfaWQiOiAiNjAxY2IwMTNlZWI5M2Q4YTQ3MjA1YTI5ZTkwMzY4Njc4MmUxZTZlNiIsCiAgInByaXZhdGVfa2V5IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxuTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFDcDZkaXZBTS9teWIvVVxuQTNtMXVnSHczblJZcGUrenhuMlNTbHpiREhFc01Wc24vSXVWcHNSODRSaVJ6UjEzaE1TMGVtalRqeW00YUdWOFxuMm83MzRrb0d6N3FvcGYwWk43WjJ3VGp5c3h3cEFMTFFJb3RGcnJXRjBHT0pxS3gxWnFTK2FwaGx2U2xrZk04elxuKzZ6NlhpeWhCemhRNVJlTGJ2b1E0NnVrYTFDQnZoTHFnVG1zSmREWDFCSjhhb0oxaUZrNXNsWWFlRDllbWNJTVxubEpBdmZZTWJMd0VRY3VPSUk4VEZUcGo4YWd1cjlRemU3ZEUzSEpNYlJLZmZWZm5sVEwzUHVmdnVZdDZ5d2NXbFxuTEo2dGlHL2tTUEpGY3huWlZ0Y3Q2OWpyenRyRlpZcXdXbTU1OXU5Ny9BM3NKSXpHL2UrMnAyaUlZU0pGYXNDOVxuTWJ4d1ZIZFZBZ01CQUFFQ2dnRUFJM0ZPakM2d3IxVDlLVFh5WU9oa2VFQ0c1Mmp4cDcvck9LVS9Xa2Z0b1lqSVxuR1g2eUJTenN4cG5UbkxJN0I4L1BrbEFJWnJ6eHVIQTZYMEZkMmpJL084MkFBNmJnTlM3c1pqZ203MlZTSmZGcFxuMjBXaFpJOHRlVFMvVnBzeklpZ2ZqRUxDK0ZIdGZQTVY2Nk4vY1JoTTJlZ2VKSzJzN0I1aGxqMVBjL1FZcm45R1xuK1pCcGpaZFdzUGp5ajlYaUpNOGtZOW5ickpYb0EzNVhQUjgvZTFpUU9CeE5yRnhWSWJ0THJ1VmpIZDQ1NXNlNFxucXh5eFdjRkxhWHVOR0xsY2xwcGwvM2VZTTN4Yzk5c20yOTcrM0pkWGhhbUhjOWVyb0I4dDVuQ00zcHU0cUJQYVxuNG94emR3OXFOOVpuTnBqQWJ4KzZNV1ZsMUJVaXJGYVY1blI4ZHE0VkR3S0JnUURXMURrU2JPZitDQXFpN2ZYblxuVnZZd0d1YWFlcGtWU0JrRnFmV3FVajZ3U3RPYjUvb3RpSTlyTWUwVTc5QU5VNEc5Ujcwa2lkV3pDV0NsakRSdlxuNFVIN2RVRVhlUHNoa1NBVFRkc3EyOUFtK1gzWG55UjRjWkJSNVA5SEFBTTVHQmViOFJ4U3ZEYjlscDVQRXFOM1xuVUFLanpvQkJWNi9OVHpTdGZIdnU0VUhZaHdLQmdRREtlZ0wraTRhVzFabE1mR0t2WXgrRjNQb2drZ3pUdHNrTFxuTWp0V05qdVFXYmNURmhuTHlROE1GMmF2SCtsVkhVcVFKelZpaWpDc0E3Y2wrKzZiVDNIQXQ2VGI1aXk3aTMxeVxuazd1QlhiNDgyM1NZV0JEVERaZXZkR0U0Zld1RnZhbHBlMlpWSU5NSUJEd0hEeEFEVDlKVGtyRnN6bUVtVjc0OVxuZXV4cExDL1VRd0tCZ1FETzVrbXBFelpEbEY4YUYvQXl3N0FMR0gxcjNoTTlTZGkvZWJiZU9LT2ppZzFQSkJYd1xuY0lzZ0JFOS9VSStocGdGWDJKV3pjUVJkai9TQ3ZBdHNqUmZOSkZweVR0UWV1ZlNZWXUxbjA1Z2ZVVDMvd29lUFxuY0dBOFh6MzBsWENGTmt6V3BWcFAzSEZodmdQdHg5ZWplMjF2Y2R4WUVpbUFwSDNwYi9DMFdrSGVWUUtCZ0VMRlxuTWErWGUyN0tTWjk3ZFYrNUpIQVVpemVxY2lodklxVmFqMDdDMjZtaXJFalRCUGE2K3dkVndEc0lIdjQraHBRN1xuR2RQQkZvUGpSY1owNmg2MWVDSEJiZEJHZTRIdFloVWl1cmJTbnlXYWlUeWo3Z2hyZHhZWkh1WnVGY01vNUhFd1xuakhLT1BJbHNQQTluM0RQN1lyVEVyMVhlU1JOSDVDaUtIT1FoK2pQWkFvR0FTdUFGM0dPSEtHRG0xMjBMOUpCM1xuOGZaZ0QzbG9tTEl3eG5mZVRIaGZ0UU1pcG9YcFBtcmIzWi9ubkVCQlVyQmF1V1gzcXRjWURGVTZvVlJ0OGt3b1xuMTJvWTFjTmxyZ2p1WHVyOUhSQjcxcWtQWmlvS2Y1c2hrZnNrZHJFK0V4ME0vMnlYNS9UN0dDMmxtelcwU2NPUFxuOVpLU3NySGVqMnFMMmtJNnVNRTQxSEU9XG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXG4iLAogICJjbGllbnRfZW1haWwiOiAiYXV0b21hdGlvbkBoZWFsdGh5LWdhc2tldC00NjcwMTQtdjQuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICJjbGllbnRfaWQiOiAiMTEwNzg0Njk5Njg2NjY3OTQ1Njk0IiwKICAiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLAogICJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzIiwKICAiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9hdXRvbWF0aW9uJTQwaGVhbHRoeS1nYXNrZXQtNDY3MDE0LXY0LmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAidW5pdmVyc2VfZG9tYWluIjogImdvb2dsZWFwaXMuY29tIgp9Cg==")
service_account_info = json.loads(decoded_creds)
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
client = gspread.authorize(creds)
spreadsheet = client.open(SHEET_NAME)


def get_data(sheet_name="Sheet1"):
    data=[]
    worksheet = spreadsheet.worksheet(sheet_name)
    rows = worksheet.get_all_values()

    if not rows:
        return []

    headers = rows[0]
    data_rows = rows[1:]

    header_map = {header: idx for idx, header in enumerate(headers)}

    required_columns = ["User Name", "User number", "Disposition"]
    for col in required_columns:
        if col not in header_map:
            raise ValueError(f"Missing column: {col}")

    extracted_data = []
    for row in data_rows:
        if len(row) < len(headers):
            row += [''] * (len(headers) - len(row))
        extracted_row = {
            "User Name": row[header_map["User Name"]],
            "User number": row[header_map["User number"]],
            "Disposition": row[header_map["Disposition"]],
        }
        extracted_data.append(extracted_row)

    return extracted_data


